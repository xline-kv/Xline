syntax = "proto3";

package messagepb;

import "command.proto";

message FetchLeaderRequest {
}

message FetchLeaderResponse {
    optional uint64 leader_id = 1;
    uint64 term = 2;
}

message FetchClusterRequest {
}

message FetchClusterResponse {
    optional uint64 leader_id = 1;
    map<uint64, string> all_members = 2;
    uint64 term = 3;
}

message AppendEntriesRequest {
    uint64 term = 1;
    uint64 leader_id = 2;
    uint64 prev_log_index = 3;
    uint64 prev_log_term = 4;
    repeated bytes entries = 5;
    uint64 leader_commit = 6;
}

message AppendEntriesResponse {
    uint64 term = 1;
    bool success = 2;
    uint64 hint_index = 3;
}

message VoteRequest {
    uint64 term = 1;
    uint64 candidate_id = 2;
    uint64 last_log_index = 3;
    uint64 last_log_term = 4;
}

message VoteResponse {
    uint64 term = 1;
    bool vote_granted = 2;
    repeated bytes spec_pool = 3;
}

message InstallSnapshotRequest {
    uint64 term = 1;
    uint64 leader_id = 2;
    uint64 last_included_index = 3;
    uint64 last_included_term = 4;
    uint64 offset = 5;
    bytes data = 6;
    bool done = 7;
}

message InstallSnapshotResponse {
    uint64 term = 1;
}

message IdSet {
    repeated bytes ids = 1;
}

message FetchReadStateRequest {
    bytes command = 1;
}

message FetchReadStateResponse {
    oneof read_state {
        IdSet ids = 1;
        uint64 commit_index = 2;
    }
}

message ShutdownRequest {
    string id = 1;
}

message ShutdownResponse {
    optional uint64 leader_id = 1;
    uint64 term = 2;
    // The original type is ProposeError
    optional bytes error = 3;
}

service Protocol {
    rpc Propose(commandpb.ProposeRequest) returns (commandpb.ProposeResponse);
    rpc WaitSynced(commandpb.WaitSyncedRequest)
        returns (commandpb.WaitSyncedResponse);
    rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);
        rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc Vote(VoteRequest) returns (VoteResponse);
    rpc InstallSnapshot(stream InstallSnapshotRequest)
        returns (InstallSnapshotResponse);
    rpc FetchLeader(FetchLeaderRequest) returns (FetchLeaderResponse);
    rpc FetchCluster(FetchClusterRequest) returns (FetchClusterResponse);
    rpc FetchReadState(FetchReadStateRequest) returns (FetchReadStateResponse);
}
