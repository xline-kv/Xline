syntax = "proto3";

package messagepb;

// Propose command from client to servers
message ProposeRequest {
    // The serialized command
    // Original type is Command trait
    bytes command = 1;
}

message ProposeResponse {
    optional string leader_id = 1;
    uint64 term = 2;
    oneof exe_result {
        // The original type is Command::ER
        bytes result = 3;
        // The original type is ProposeError
        bytes error = 4;
    }
}

message FetchLeaderRequest {
}

message FetchLeaderResponse {
    optional string leader_id = 1;
    uint64 term = 2;
}

message WaitSyncedRequest {
    bytes id = 1;
}

message WaitSyncedResponse {
    message Success {
        bytes after_sync_result = 1;
        bytes exe_result = 2;
    }
    oneof sync_result {
        Success success = 1;
        bytes   error = 2;
    }
}

message AppendEntriesRequest {
    uint64 term = 1;
    string leader_id = 2;
    uint64 prev_log_index = 3;
    uint64 prev_log_term = 4;
    repeated bytes entries = 5;
    uint64 leader_commit = 6;
}

message AppendEntriesResponse {
    uint64 term = 1;
    bool success = 2;
    uint64 commit_index = 3;
}

message VoteRequest {
    uint64 term = 1;
    string candidate_id = 2;
    uint64 last_log_index = 3;
    uint64 last_log_term = 4;
}

message VoteResponse {
    uint64 term = 1;
    bool   vote_granted = 2;
    repeated bytes spec_pool = 3;
}

service Protocol {
    rpc Propose (ProposeRequest) returns (ProposeResponse);
    rpc WaitSynced (WaitSyncedRequest) returns (WaitSyncedResponse);
    rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc Vote (VoteRequest) returns (VoteResponse);
    rpc FetchLeader (FetchLeaderRequest) returns (FetchLeaderResponse);
}
